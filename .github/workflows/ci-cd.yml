name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # любые коммиты в master → сборка и пуш dev-образа
    tags:
      - 'v*'    # при создании тега вида v1.0.0 → full deploy

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/test-app

jobs:
  build-dev:
    if: github.event_name == 'push' && github.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push dev image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:dev

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Load version from .version file
        run: |
          export $(cat .version | xargs)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables for manifest generation
        run: |
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Set APP_VERSION explicitly
        run: |
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push tagged image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl  -LSs https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" 
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" > ~/.kube/config

      - name: Generate deployment.yaml from template
        run: |
          export IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/test-app
          export APP_VERSION=${{ env.APP_VERSION }}
          envsubst < k8s/deployment.template.yaml > k8s/deployment.yaml

      - name: Show generated deployment.yaml
        run: |
          echo "Содержимое k8s/deployment.yaml:"
          cat k8s/deployment.yaml

      - name: Apply manifests
        run: |
          kubectl apply -f k8s/