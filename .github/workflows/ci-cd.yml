name: CI/CD Pipeline (Git Tag Only for Production)

on:
  push:
    branches:
      - master  # —Å–±–æ—Ä–∫–∞ dev-–æ–±—Ä–∞–∑–∞ –ø—Ä–∏ –ø—É—à–µ –≤ master
    tags:
      - 'v*'    # full deploy —Ç–æ–ª—å–∫–æ –ø–æ Git Tag

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/test-app

jobs:
  build-dev:
    if: github.event_name == 'push' && github.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push dev image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:dev

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version from Git tag
        run: |
          APP_VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Setup environment and dependencies
        run: |
          sudo apt update
          sudo apt install -y gettext-base

      - name: Debug variables before substitution
        run: |
          echo "APP_VERSION = $APP_VERSION"
          echo "IMAGE_NAME = $IMAGE_NAME"
          which envsubst || echo "envsubst not found"

      - name: Generate deployment.yaml from template
        run: |
          export APP_VERSION=${{ env.APP_VERSION }}
          export IMAGE_NAME=${{ env.IMAGE_NAME }}

          echo "APP_VERSION = $APP_VERSION"
          echo "IMAGE_NAME = $IMAGE_NAME"
          which envsubst || echo "envsubst not found"

          envsubst < k8s/deployment.template.yaml > k8s/deployment.yaml

          cat k8s/deployment.yaml
          
      - name: Show generated deployment.yaml
        run: |
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ k8s/deployment.yaml:"
          cat k8s/deployment.yaml

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl  -LSs https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" 
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" > ~/.kube/config

      - name: Validate YAML after substitution
        run: |
          if grep -q '\${APP_VERSION}' k8s/deployment.yaml; then
            echo "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è APP_VERSION –Ω–µ –∑–∞–º–µ–Ω–µ–Ω–∞!"
            exit 1
          fi
          echo "‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"   

      - name: Apply manifests
        run: |
          kubectl apply -f k8s/deployment.yaml -f k8s/service.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/test-app --timeout=60s

      - name: Check current image in Deployment
        run: |
          CURRENT_IMAGE=$(kubectl get deployment test-app -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "üöÄ –¢–µ–∫—É—â–∏–π –æ–±—Ä–∞–∑ –≤ Kubernetes: $CURRENT_IMAGE"
          if [[ "$CURRENT_IMAGE" == "*${APP_VERSION}" ]]; then
            echo "‚úÖ –í–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ $APP_VERSION"
          else
            echo "‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è $IMAGE_NAME:$APP_VERSION, –Ω–∞–π–¥–µ–Ω–æ $CURRENT_IMAGE"
            exit 1
          fi